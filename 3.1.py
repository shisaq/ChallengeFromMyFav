# -coding:utf-8-
from fractions import gcd
def run():
    inputMatrix = [
        [1, 2, 3, 0, 0, 0],
        [4, 5, 6, 0, 0, 0],
        [7, 8, 9, 1, 0, 0],
        [0, 0, 0, 0, 1, 2],
        [0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0]
    ]

    challenge3_1(inputMatrix)

def challenge3_1(m):
    sumRow = []
    result = []
    transitionArrIndex = []
    absorbedArrIndex = []

    for i, s in enumerate(m):
        s[i] = 0
        sumRow.append(sum(s))

    for i in range(0, len(m)):
        if sumRow[i] != 0:
            transitionArrIndex.append(i)
        else:
            absorbedArrIndex.append(i)

    if len(absorbedArrIndex) == 1:
        return [1, 1]
    if len(transitionArrIndex) <= 1:
        for i, s in enumerate(m):
            result.append(s[i])
        result.append(sum(m[0]))
        return result

    for i in range(len(transitionArrIndex)):
        a = transitionArrIndex[i]
        for j in range(len(transitionArrIndex)):
            if j != i:
                b = transitionArrIndex[j]
                m[b] = clearMarcov(m[a], m[b], a, b)

    for i in absorbedArrIndex:
        result.append(m[0][i])
    result.append(sum(m[0]))
    print result

def clearMarcov(transArr1, transArr2, i1, i2):
    output = []
    temp = 0
    for i in range(len(transArr1)):
        output.append(0)

    for i in range(len(transArr1)):
        if i != i1 and i != i2:
            output[i] = transArr1[i2] * transArr2[i]
            output[i] += transArr1[i] * sum(transArr2)
            temp = gcd(temp, output[i])

    for i in range(len(transArr1)):
        if temp == 0:
            output[i] = 0
        else:
            output[i] /= temp
    return output

if __name__ == '__main__':
    run()

# assert (
#     answer([
#         [0, 2, 1, 0, 0],
#         [0, 0, 0, 3, 4],
#         [0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0]
#     ]) == [7, 6, 8, 21]
# )

# assert (
#     answer([
#         [0, 1, 0, 0, 0, 1],
#         [4, 0, 0, 3, 2, 0],
#         [0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0]
#     ]) == [0, 3, 2, 9, 14]
# )

# assert (
#     answer([
#         [1, 2, 3, 0, 0, 0],
#         [4, 5, 6, 0, 0, 0],
#         [7, 8, 9, 1, 0, 0],
#         [0, 0, 0, 0, 1, 2],
#         [0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0]
#     ]) == [1, 2, 3]
# )
# assert (
#     answer([
#         [0]
#     ]) == [1, 1]
# )

# assert (
#     answer([
#         [0, 0, 12, 0, 15, 0, 0, 0, 1, 8],
#         [0, 0, 60, 0, 0, 7, 13, 0, 0, 0],
#         [0, 15, 0, 8, 7, 0, 0, 1, 9, 0],
#         [23, 0, 0, 0, 0, 1, 0, 0, 0, 0],
#         [37, 35, 0, 0, 0, 0, 3, 21, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#     ]) == [1, 2, 3, 4, 5, 15]
# )

# assert (
#     answer([
#         [0, 7, 0, 17, 0, 1, 0, 5, 0, 2],
#         [0, 0, 29, 0, 28, 0, 3, 0, 16, 0],
#         [0, 3, 0, 0, 0, 1, 0, 0, 0, 0],
#         [48, 0, 3, 0, 0, 0, 17, 0, 0, 0],
#         [0, 6, 0, 0, 0, 1, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#     ]) == [4, 5, 5, 4, 2, 20]
# )

# assert (
#     answer([
#         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#     ]) == [1, 1, 1, 1, 1, 5]
# )

# assert (
#     answer([
#         [1, 1, 1, 0, 1, 0, 1, 0, 1, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 0, 1, 1, 1, 0, 1, 0, 1, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 0, 1, 0, 1, 1, 1, 0, 1, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 0, 1, 0, 1, 0, 1, 1, 1, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [1, 0, 1, 0, 1, 0, 1, 0, 1, 1],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#     ]) == [2, 1, 1, 1, 1, 6]
# )

# assert (
#     answer([
#         [0, 86, 61, 189, 0, 18, 12, 33, 66, 39],
#         [0, 0, 2, 0, 0, 1, 0, 0, 0, 0],
#         [15, 187, 0, 0, 18, 23, 0, 0, 0, 0],
#         [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#     ]) == [6, 44, 4, 11, 22, 13, 100]
# )

# assert (
#     answer([
#         [0, 0, 0, 0, 3, 5, 0, 0, 0, 2],
#         [0, 0, 4, 0, 0, 0, 1, 0, 0, 0],
#         [0, 0, 0, 4, 4, 0, 0, 0, 1, 1],
#         [13, 0, 0, 0, 0, 0, 2, 0, 0, 0],
#         [0, 1, 8, 7, 0, 0, 0, 1, 3, 0],
#         [1, 7, 0, 0, 0, 0, 0, 2, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
#         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
#     ]) == [1, 1, 1, 2, 5]
# )
